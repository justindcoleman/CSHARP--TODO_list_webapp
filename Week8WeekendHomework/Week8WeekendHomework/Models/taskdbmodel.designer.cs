#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Week8WeekendHomework.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TaskDBHomework")]
	public partial class taskdbmodelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTaskTableHomework(TaskTableHomework instance);
    partial void UpdateTaskTableHomework(TaskTableHomework instance);
    partial void DeleteTaskTableHomework(TaskTableHomework instance);
    partial void InsertTaskUserLogin(TaskUserLogin instance);
    partial void UpdateTaskUserLogin(TaskUserLogin instance);
    partial void DeleteTaskUserLogin(TaskUserLogin instance);
    #endregion
		
		public taskdbmodelDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TaskDBHomeworkConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public taskdbmodelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public taskdbmodelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public taskdbmodelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public taskdbmodelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TaskTableHomework> TaskTableHomeworks
		{
			get
			{
				return this.GetTable<TaskTableHomework>();
			}
		}
		
		public System.Data.Linq.Table<TaskUserLogin> TaskUserLogins
		{
			get
			{
				return this.GetTable<TaskUserLogin>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskTableHomework")]
	public partial class TaskTableHomework : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskID;
		
		private string _TaskName;
		
		private string _TaskDescription;
		
		private System.Nullable<System.DateTime> _TaskDueDate;
		
		private bool _TaskComplete;
		
		private EntitySet<TaskUserLogin> _TaskUserLogins;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnTaskNameChanging(string value);
    partial void OnTaskNameChanged();
    partial void OnTaskDescriptionChanging(string value);
    partial void OnTaskDescriptionChanged();
    partial void OnTaskDueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTaskDueDateChanged();
    partial void OnTaskCompleteChanging(bool value);
    partial void OnTaskCompleteChanged();
    #endregion
		
		public TaskTableHomework()
		{
			this._TaskUserLogins = new EntitySet<TaskUserLogin>(new Action<TaskUserLogin>(this.attach_TaskUserLogins), new Action<TaskUserLogin>(this.detach_TaskUserLogins));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskName", DbType="VarChar(100)")]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if ((this._TaskName != value))
				{
					this.OnTaskNameChanging(value);
					this.SendPropertyChanging();
					this._TaskName = value;
					this.SendPropertyChanged("TaskName");
					this.OnTaskNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string TaskDescription
		{
			get
			{
				return this._TaskDescription;
			}
			set
			{
				if ((this._TaskDescription != value))
				{
					this.OnTaskDescriptionChanging(value);
					this.SendPropertyChanging();
					this._TaskDescription = value;
					this.SendPropertyChanged("TaskDescription");
					this.OnTaskDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskDueDate", DbType="Date")]
		public System.Nullable<System.DateTime> TaskDueDate
		{
			get
			{
				return this._TaskDueDate;
			}
			set
			{
				if ((this._TaskDueDate != value))
				{
					this.OnTaskDueDateChanging(value);
					this.SendPropertyChanging();
					this._TaskDueDate = value;
					this.SendPropertyChanged("TaskDueDate");
					this.OnTaskDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskComplete", DbType="Bit NOT NULL")]
		public bool TaskComplete
		{
			get
			{
				return this._TaskComplete;
			}
			set
			{
				if ((this._TaskComplete != value))
				{
					this.OnTaskCompleteChanging(value);
					this.SendPropertyChanging();
					this._TaskComplete = value;
					this.SendPropertyChanged("TaskComplete");
					this.OnTaskCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskTableHomework_TaskUserLogin", Storage="_TaskUserLogins", ThisKey="TaskID", OtherKey="TaskID")]
		public EntitySet<TaskUserLogin> TaskUserLogins
		{
			get
			{
				return this._TaskUserLogins;
			}
			set
			{
				this._TaskUserLogins.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TaskUserLogins(TaskUserLogin entity)
		{
			this.SendPropertyChanging();
			entity.TaskTableHomework = this;
		}
		
		private void detach_TaskUserLogins(TaskUserLogin entity)
		{
			this.SendPropertyChanging();
			entity.TaskTableHomework = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskUserLogins")]
	public partial class TaskUserLogin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskID;
		
		private string _UserName;
		
		private EntityRef<TaskTableHomework> _TaskTableHomework;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public TaskUserLogin()
		{
			this._TaskTableHomework = default(EntityRef<TaskTableHomework>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._TaskTableHomework.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskTableHomework_TaskUserLogin", Storage="_TaskTableHomework", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true)]
		public TaskTableHomework TaskTableHomework
		{
			get
			{
				return this._TaskTableHomework.Entity;
			}
			set
			{
				TaskTableHomework previousValue = this._TaskTableHomework.Entity;
				if (((previousValue != value) 
							|| (this._TaskTableHomework.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskTableHomework.Entity = null;
						previousValue.TaskUserLogins.Remove(this);
					}
					this._TaskTableHomework.Entity = value;
					if ((value != null))
					{
						value.TaskUserLogins.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("TaskTableHomework");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
